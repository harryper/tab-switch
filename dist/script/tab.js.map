{"version":3,"sources":["tab.js"],"names":["$","window","document","undefined","Tab","el","opts","this","extend","DEFAULTS","$el","tabs","find","tabClass","contents","contentClass","trigger","that","invoke","_tabSwitch","autoPlay","timerAuto","clearInterval","_autoPlay","hover","event","preventDefault","on","e","curIndex","index","timerDelay","clearTimeout","setTimeout","prototype","constructor","autoIndex","pIndex","mode","eq","addClass","tabClassCur","siblings","removeClass","contentClassCur","fadeIn","fadeOut","setInterval","console","log","length","fn","tab","each","jQuery"],"mappings":"CACC,SAAUA,EAAGC,EAAQC,EAAUC,GAE/B,QAASC,GAAKC,EAAIC,GAEjBC,KAAKD,KAAON,EAAEQ,UAAWJ,EAAIK,SAAUH,GACpCC,KAAKG,IAAMV,EAAEK,GACbE,KAAKI,KAAOJ,KAAKG,IAAIE,KAAK,IAAML,KAAKD,KAAKO,SAC1C,IAAIF,GAAOJ,KAAKI,IAChBJ,MAAKO,SAAWP,KAAKG,IAAIE,KAAK,IAAML,KAAKD,KAAKS,aAC9C,IACIC,IADWT,KAAKO,SACNP,KAAKD,KAAKU,SACpBC,EAAOV,IAEPA,MAAKD,KAAKY,OAAS,GACtBX,KAAKY,WAAWZ,KAAKD,KAAKY,OAAS,GAGhCX,KAAKD,KAAKc,YAAa,IACtBb,KAAKc,YACXC,cAAcf,KAAKc,WACnBd,KAAKc,UAAY,MAEfd,KAAKgB,YAELhB,KAAKG,IAAIc,MAAM,SAASC,GAC1BA,EAAMC,iBAENJ,cAAcL,EAAKI,WACnBJ,EAAKI,UAAY,MACf,SAASI,GACVA,EAAMC,iBAENT,EAAKM,eAKW,UAAZP,GACHL,EAAKgB,GAAGX,EAAS,SAASY,GAEzBX,EAAKY,SAAWlB,EAAKmB,MAAM9B,EAAEO,OAC7BU,EAAKE,WAAWF,EAAKY,YAIP,eAAZb,GACHL,EAAKgB,GAAGX,EAAS,SAASY,GAEzBX,EAAKY,SAAWlB,EAAKmB,MAAM9B,EAAEO,OACzBU,EAAKc,aACXC,aAAaf,EAAKc,YAClBd,EAAKc,WAAa,MAEnBd,EAAKc,WAAaE,WAAW,WAC5BhB,EAAKE,WAAWF,EAAKY,UACrBZ,EAAKc,WAAa,MAChB,OAIN3B,EAAI8B,WAEHC,YAAa/B,EACbgC,UAAW,EACXP,SAAU,EACVR,UAAW,KACXU,WAAY,KACZZ,WAAY,SAASkB,GAEG,SAAnB9B,KAAKD,KAAKgC,OACb/B,KAAKI,KAAK4B,GAAGF,GAAQG,SAASjC,KAAKD,KAAKmC,aAAaC,WAAWC,YAAYpC,KAAKD,KAAKmC,aACtFlC,KAAKO,SAASyB,GAAGF,GAAQG,SAASjC,KAAKD,KAAKsC,iBAAiBF,WAAWC,YAAYpC,KAAKD,KAAKsC,kBAGxE,SAAnBrC,KAAKD,KAAKgC,OACb/B,KAAKI,KAAK4B,GAAGF,GAAQG,SAASjC,KAAKD,KAAKmC,aAAaC,WAAWC,YAAYpC,KAAKD,KAAKmC,aACtFlC,KAAKO,SAASyB,GAAGF,GAAQQ,SAASH,WAAWI,WAG1CvC,KAAKD,KAAKc,YAAa,IACvBb,KAAK6B,UAAYC,IAGtBd,UAAW,WACV,GAAIZ,GAAOJ,KAAKI,KACZM,EAAOV,IACXA,MAAKc,UAAY0B,YAAY,WAC5BC,QAAQC,IAAI1C,MACTU,EAAKmB,YAEJnB,EAAKmB,WAAazB,EAAKuC,SAC1BjC,EAAKmB,UAAY,GAEfnB,EAAKE,WAAWF,EAAKmB,YACnB,OAGRhC,EAAIK,UACHI,SAAU,MACV4B,YAAa,eACb1B,aAAc,UACd6B,gBAAiB,kBACjB5B,QAAS,aACTsB,KAAM,OACNlB,UAAU,EACVF,OAAQ,GAGTlB,EAAEmD,GAAG3C,QACD4C,IAAK,SAAS9C,GAGV,MAAOC,MAAK8C,KAAK,WACb,GAAIjD,GAAIG,KAAMD,SAIxBgD,OAAQrD,OAAQC","file":"tab.js","sourcesContent":["// 为避免$别名与其他库发生冲突，可以使用jQuery， 或者在立即调用的函数表达式（ IIFE）中传入$，使其成为一个局部变量，这么做也可以防止污染全局命名空间。\r\n;(function($, window, document, undefined) { // 将window/document等系统变量作为参数传递到插件内部，这样在需要访问这些系统变量的时候就可以访问这些参数，也就是访问局部变量，比访问全局变量速度更快，有少许性能提升\r\n\t/*用面向对象的方式重写，然后封装成jquery插件*/\r\n\tfunction Tab (el, opts) {\r\n\t\t// body...\r\n\t\tthis.opts = $.extend({}, Tab.DEFAULTS, opts);\r\n\t    this.$el = $(el);\r\n\t    this.tabs = this.$el.find('.' + this.opts.tabClass);\r\n\t    var tabs = this.tabs;\r\n\t    this.contents = this.$el.find('.' + this.opts.contentClass);\r\n\t    var contents = this.contents;\r\n\t    var trigger = this.opts.trigger;\r\n\t    var that = this;\r\n\t    // 设定默认显示第几个tab\r\n\t    if (this.opts.invoke > 1) {\r\n\t    \tthis._tabSwitch(this.opts.invoke - 1);\r\n\t    }\r\n\t    // 控制自动切换\r\n\t    if (this.opts.autoPlay === true) {\r\n\t    \tif (this.timerAuto) {\r\n\t\t\t\tclearInterval(this.timerAuto);\r\n\t\t\t\tthis.timerAuto = null;\r\n\t\t\t}\r\n\t    \tthis._autoPlay();\r\n\t    \t// 鼠标移入tab区域停止自动切换，移出恢复\r\n\t    \tthis.$el.hover(function(event) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\t/* Act on the event */\r\n\t\t\t\tclearInterval(that.timerAuto);\r\n\t\t\t\tthat.timerAuto = null;\r\n\t\t\t}, function(event) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t/* Act on the event */\r\n\t\t\t\t\tthat._autoPlay();\r\n\t\t\t\t}\r\n\t    \t);\r\n\t    }\r\n\t    // 切换触发方式\r\n\t    if (trigger === 'click') {\r\n\t    \ttabs.on(trigger, function(e) {\r\n\t    \t\t/* Act on the event */\r\n\t    \t\tthat.curIndex = tabs.index($(this));\r\n\t    \t\tthat._tabSwitch(that.curIndex);\r\n\t    \t\t\r\n\t    \t});\r\n\t    }\r\n\t    if (trigger === 'mouseenter') {\r\n\t    \ttabs.on(trigger, function(e) {\r\n\t    \t\t/* Act on the event */\r\n\t    \t\tthat.curIndex = tabs.index($(this));\r\n\t    \t\tif (that.timerDelay) {\r\n\t\t\t\t\tclearTimeout(that.timerDelay);\r\n\t\t\t\t\tthat.timerDelay = null;\r\n\t\t\t\t}\r\n\t\t\t\tthat.timerDelay = setTimeout(function() {\r\n\t\t\t\t\tthat._tabSwitch(that.curIndex);\r\n\t\t\t\t\tthat.timerDelay = null; // debounce去抖，保证清除动画队列\r\n\t\t\t\t}, 500);\r\n\t    \t});\r\n\t    }\r\n\t}\r\n\tTab.prototype = {\r\n\t\t// body...\r\n\t\tconstructor: Tab,\r\n\t\tautoIndex: 0, // 用来记录自动切换的索引\r\n\t\tcurIndex: 0, // 用来记录当前切换的tab的索引\r\n\t\ttimerAuto: null, // 自动切换定时器\r\n\t\ttimerDelay: null, // 延迟切换定时器\r\n\t\t_tabSwitch: function(pIndex) {\r\n\t\t\t// 硬切换\r\n\t\t\tif (this.opts.mode === 'none') {\r\n\t\t\t\tthis.tabs.eq(pIndex).addClass(this.opts.tabClassCur).siblings().removeClass(this.opts.tabClassCur);\r\n\t\t\t\tthis.contents.eq(pIndex).addClass(this.opts.contentClassCur).siblings().removeClass(this.opts.contentClassCur);\r\n\t\t\t}\r\n\t\t\t// 淡入淡出切换\r\n\t\t\tif (this.opts.mode === 'fade') {\r\n\t\t\t\tthis.tabs.eq(pIndex).addClass(this.opts.tabClassCur).siblings().removeClass(this.opts.tabClassCur);\r\n\t\t\t\tthis.contents.eq(pIndex).fadeIn().siblings().fadeOut();\r\n\t\t\t}\r\n\t\t\t// 鼠标移入触发切换后要改变自动切换的index值，让下次自动切换的时候从当前tab开始切换\r\n\t\t\tif (this.opts.autoPlay === true) {\r\n\t    \t\tthis.autoIndex = pIndex;\r\n\t    \t}\r\n\t\t},\r\n\t\t_autoPlay: function() {\r\n\t\t\tvar tabs = this.tabs;\r\n\t\t\tvar that = this; // 在原型方法内部把this负值给that，而不是在原型属性里，如果在原型属性里赋值而在外层函数里没有把this负值给that，在定时器内部还是访问不到的，因为闭包里的this还是指向全局作用域（这里用到了定时器，定时器内this指向window对象），而在外层函数里把this负值给that，闭包中的匿名函数就能访问到了；这里的this在调用时就是Tab的实例\r\n\t\t\tthis.timerAuto = setInterval(function() {\r\n\t\t\t\tconsole.log(this);\r\n\t    \t\tthat.autoIndex++;\r\n\t\t\t\t// 索引达到最大时要重新归零\r\n\t\t\t\tif (that.autoIndex >= tabs.length) {\r\n\t\t\t\t\tthat.autoIndex = 0;\r\n\t\t\t\t}\r\n\t    \t\tthat._tabSwitch(that.autoIndex);\r\n\t    \t}, 2000);\r\n\t\t}\r\n\t}\r\n\tTab.DEFAULTS = {\r\n\t\ttabClass: 'tab', // tab标签类名，可自定义\r\n\t\ttabClassCur: 'tab-selected', // 标签选定时添加的类名，在该类名下添加标签选定状态的样式\r\n\t\tcontentClass: 'content', // content标签类名，可自定义\r\n\t\tcontentClassCur: 'content-current', // 内容展示时添加的类名，在该类名下添加内容展示时的样式\r\n\t\ttrigger: 'mouseenter', // 切换触发方式，默认mouseenter，可选click\r\n\t\tmode: 'none', // 切换时的动画效果，可选fade，淡入淡出\r\n\t\tautoPlay: true, // 是否自动切换，默认true\r\n\t\tinvoke: 1 // 初始默认显示第几个tab\r\n\t}\r\n\t// 将一个对象添加到jquery的原型上从而提供新的jquery实例方法，这里就相当于给jquery实例对象提供了一个backtop方法，这也是实现jquery插件的常用方法，对象里定义的方法名就是插件方法名\r\n\t$.fn.extend({\r\n\t    tab: function(opts) {\r\n\t        // return 是为了实现连缀，这里的this指代调用插件时用jquery选择的元素，调用each方法是因为可能会选择多个元素\r\n\t        // .each()方法的回调函数的执行环境是当前dom元素，也就是说this始终指向当前dom元素，所以下面的回掉函数就是创建一个BackTop的实例，并把当前dom元素作为参数传入\r\n\t        return this.each(function() {\r\n\t            new Tab(this, opts); // 这里的this指向dom元素\r\n\t        })\r\n\t    }\r\n\t})\r\n})(jQuery, window, document);"]}